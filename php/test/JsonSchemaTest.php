<?php

require_once dirname(__FILE__) . '/../JsonSchema.php';

/**
 * Test class for JsonSchema.
 * Generated by PHPUnit on 2010-12-13 at 09:42:37.
 */
class JsonSchemaTest extends PHPUnit_Framework_TestCase {

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     */
    public function testGetSchema() {
        echo 'test generate', PHP_EOL;
        echo 'string', PHP_EOL;
        $json = '"test string"';
        $schema = new JsonSchema();
        parent::assertEquals(array(
            'type' => 'string',
            'format' => 'regex',
            'pattern' => '/^[a-z0-9]+$/i',
            'minLength' => 0,
            'maxLength' => 2147483647,
                ), $schema->getSchema(json_decode($json)));

        echo 'number', PHP_EOL;
        $json = '123.321';
        $schema = new JsonSchema();
        parent::assertEquals(array(
            'type' => 'number',
            'default' => 0,
            'minimum' => 0,
            'maximum' => 2147483647,
            'exclusiveMinimum' => 0,
            'exclusiveMaximum' => 2147483647,
                ), $schema->getSchema(json_decode($json)));

        echo 'integer', PHP_EOL;
        $json = '123';
        $schema = new JsonSchema();
        parent::assertEquals(array(
            'type' => 'integer',
            'default' => 0,
            'minimum' => 0,
            'maximum' => 2147483647,
            'exclusiveMinimum' => 0,
            'exclusiveMaximum' => 2147483647,
                ), $schema->getSchema(json_decode($json)));


        echo 'boolean', PHP_EOL;
        $json = 'true';
        $schema = new JsonSchema();
        parent::assertEquals(array(
            'type' => 'boolean',
            'default' => false,
                ), $schema->getSchema(json_decode($json)));

        echo 'object', PHP_EOL;
        $value = new stdClass();
        $value->name = 'a name';
        $value->age = 23;
        $value->height = 183.5;
        $json = json_encode($value);

        $schema = new JsonSchema();
        parent::assertEquals(array(
            'type' => 'object',
            'properties' =>
            array(
                'name' =>
                array(
                    'type' => 'string',
                    'format' => 'regex',
                    'pattern' => '/^[a-z0-9]+$/i',
                    'minLength' => 0,
                    'maxLength' => 2147483647,
                ),
                'age' =>
                array(
                    'type' => 'integer',
                    'default' => 0,
                    'minimum' => 0,
                    'maximum' => 2147483647,
                    'exclusiveMinimum' => 0,
                    'exclusiveMaximum' => 2147483647,
                ),
                'height' =>
                array(
                    'type' => 'number',
                    'default' => 0,
                    'minimum' => 0,
                    'maximum' => 2147483647,
                    'exclusiveMinimum' => 0,
                    'exclusiveMaximum' => 2147483647,
                ),
                )), $schema->getSchema(json_decode($json)));


        echo 'array Map', PHP_EOL;
        $value = new stdClass();
        $value->name = 'a name';
        $value->age = 23;
        $value->height = 183.5;
        $json = json_encode($value);
        $schema = new JsonSchema();
        parent::assertEquals(array(
            'type' => 'object',
            'properties' =>
            array(
                'name' =>
                array(
                    'type' => 'string',
                    'format' => 'regex',
                    'pattern' => '/^[a-z0-9]+$/i',
                    'minLength' => 0,
                    'maxLength' => 2147483647,
                ),
                'age' =>
                array(
                    'type' => 'integer',
                    'default' => 0,
                    'minimum' => 0,
                    'maximum' => 2147483647,
                    'exclusiveMinimum' => 0,
                    'exclusiveMaximum' => 2147483647,
                ),
                'height' =>
                array(
                    'type' => 'number',
                    'default' => 0,
                    'minimum' => 0,
                    'maximum' => 2147483647,
                    'exclusiveMinimum' => 0,
                    'exclusiveMaximum' => 2147483647,
                ),
            ),
                ), $schema->getSchema(json_decode($json)));

        echo 'array List', PHP_EOL;
        $value = array();
        $value[] = 'a name';
        $value[] = 23;
        $value[] = 183.5;
        $json = json_encode($value);
        $schema = new JsonSchema();
        parent::assertEquals(array(
            'type' => 'array',
            'minItems' => 0,
            'maxItems' => 20,
            'items' =>
            array(
                'type' => 'string',
                'format' => 'regex',
                'pattern' => '/^[a-z0-9]+$/i',
                'minLength' => 0,
                'maxLength' => 2147483647,
            ),
                ), $schema->getSchema(json_decode($json)));


        echo 'array List<Map>', PHP_EOL;
        $value = new stdClass();
        $value->users[] = array('id' => 1, 'account' => 'userA');
        $value->users[] = array('id' => 3, 'account' => 'userB');
        $value->users[] = array('id' => 5, 'account' => 'userC');
        $json = json_encode($value);

        $schema = new JsonSchema();
        parent::assertEquals(array(
            'type' => 'object',
            'properties' =>
            array(
                'users' =>
                array(
                    'type' => 'array',
                    'minItems' => 0,
                    'maxItems' => 20,
                    'items' =>
                    array(
                        'type' => 'object',
                        'properties' =>
                        array(
                            'id' =>
                            array(
                                'type' => 'integer',
                                'default' => 0,
                                'minimum' => 0,
                                'maximum' => 2147483647,
                                'exclusiveMinimum' => 0,
                                'exclusiveMaximum' => 2147483647,
                            ),
                            'account' =>
                            array(
                                'type' => 'string',
                                'format' => 'regex',
                                'pattern' => '/^[a-z0-9]+$/i',
                                'minLength' => 0,
                                'maxLength' => 2147483647,
                            )
                        )
                    )
                )
                )), $schema->getSchema(json_decode($json)));
    }

    /**
     */
    public function testValidate() {
        echo 'test validate', PHP_EOL;

        echo 'string', PHP_EOL;
        $json = '"test string"';
        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' => 'string',
                    'minLength' => 0,
                    'maxLength' => 2147483647,
                        ), json_decode($json)));

        echo 'string', PHP_EOL;
        $json = '"test.string"';
        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' => 'string',
                    'format' => 'regex',
                    'pattern' => '/^[a-z.]+$/i',
                    'minLength' => 0,
                    'maxLength' => 2147483647,
                        ), json_decode($json)));

        echo 'date-time', PHP_EOL;
        $json = '"2011-07-27T23:08:09Z"';
        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' => 'string',
                    'format' => 'date-time',
                        ), json_decode($json)));


        echo 'date', PHP_EOL;
        $json = '"2011-07-27"';
        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' => 'string',
                    'format' => 'date',
                        ), json_decode($json)));

        echo 'time', PHP_EOL;
        $json = '"23:08:09"';
        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' => 'string',
                    'format' => 'time',
                        ), json_decode($json)));

        echo 'utc-millisec', PHP_EOL;
        $json = sprintf('"%s"', microtime(true));
        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' => 'string',
                    'format' => 'utc-millisec',
                        ), json_decode($json)));

        echo 'color', PHP_EOL;
        $json = '"#f00"';
        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' => 'string',
                    'format' => 'color',
                        ), json_decode($json)));

        echo 'color', PHP_EOL;
        $json = '"#c3c3c3"';
        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' => 'string',
                    'format' => 'color',
                        ), json_decode($json)));

        echo 'color', PHP_EOL;
        $json = '"rgb(c3,c3,c3)"';
        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' => 'string',
                    'format' => 'color',
                        ), json_decode($json)));

        echo 'color', PHP_EOL;
        $value = '"blue"';
        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' => 'string',
                    'format' => 'color',
                        ), json_decode($json)));

        echo 'host', PHP_EOL;
        $json = '"example.com"';
        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' => 'string',
                    'format' => 'host-name',
                        ), json_decode($json)));

        $json = '"exam-ple.com"';
        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' => 'string',
                    'format' => 'host-name',
                        ), json_decode($json)));


        $json = '"exam-ple"';
        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' => 'string',
                    'format' => 'host-name',
                        ), json_decode($json)));


        echo 'number', PHP_EOL;
        $json = '123.321';
        $schema = new JsonSchema();

        parent::assertTrue($schema->validate(array(
                    'type' => 'number',
                    'default' => 0,
                    'minimum' => 0,
                    'maximum' => 2147483647,
                    'exclusiveMinimum' => 0,
                    'exclusiveMaximum' => 2147483647,
                        ), json_decode($json)));

        echo 'integer', PHP_EOL;
        $json = '123';
        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' => 'integer',
                    'default' => 0,
                    'minimum' => 0,
                    'maximum' => 2147483647,
                    'exclusiveMinimum' => 0,
                    'exclusiveMaximum' => 2147483647,
                        ), json_decode($json)));


        echo 'boolean', PHP_EOL;
        $json = 'true';
        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' => 'boolean',
                    'default' => false,
                        ), json_decode($json)));

        echo 'integer or boolean', PHP_EOL;
        $json = 'true';
        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' =>
                    array(
                        0 => 'boolean',
                        1 => 'integer',
                    ),
                    'default' => false,
                        ), json_decode($json)));

        $json = '123';
        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' =>
                    array(
                        'boolean',
                        'integer',
                    ),
                    'default' => false,
                        ), json_decode($json)));


        echo 'integer or boolean or null', PHP_EOL;
        $json = 'null';
        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' =>
                    array(
                        'boolean',
                        'integer',
                        'null',
                    ),
                    'default' => null,
                        ), json_decode($json)));

        echo 'object', PHP_EOL;
        $value = new stdClass();
        $value->name = 'a name';
        $value->age = 23;
        $value->height = 183.5;
        $json = json_encode($value);

        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' => 'object',
                    'properties' =>
                    array(
                        'name' =>
                        array(
                            'type' => 'string',
                            'format' => 'regex',
                            'pattern' => '/^[a-z0-9 ]+$/i',
                            'minLength' => 0,
                            'maxLength' => 2147483647,
                        ),
                        'age' =>
                        array(
                            'type' => 'integer',
                            'default' => 0,
                            'minimum' => 0,
                            'maximum' => 2147483647,
                            'exclusiveMinimum' => 0,
                            'exclusiveMaximum' => 2147483647,
                        ),
                        'height' =>
                        array(
                            'type' => 'number',
                            'default' => 0,
                            'minimum' => 0,
                            'maximum' => 2147483647,
                            'exclusiveMinimum' => 0,
                            'exclusiveMaximum' => 2147483647,
                        ),
                    ),
                        ), json_decode($json)));

        echo 'array Map', PHP_EOL;
        $value = array();
        $value['name'] = 'a name';
        $value['age'] = 23;
        $value['height'] = 183.5;
        $json = json_encode($value);
        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' => 'object',
                    'properties' =>
                    array(
                        'name' =>
                        array(
                            'type' => 'string',
                            'format' => 'regex',
                            'pattern' => '/^[a-z0-9 ]+$/i',
                            'minLength' => 0,
                            'maxLength' => 2147483647,
                        ),
                        'age' =>
                        array(
                            'type' => 'integer',
                            'default' => 0,
                            'minimum' => 0,
                            'maximum' => 2147483647,
                            'exclusiveMinimum' => 0,
                            'exclusiveMaximum' => 2147483647,
                        ),
                        'height' =>
                        array(
                            'type' => 'number',
                            'default' => 0,
                            'minimum' => 0,
                            'maximum' => 2147483647,
                            'exclusiveMinimum' => 0,
                            'exclusiveMaximum' => 2147483647,
                        ),
                    ),
                        ), json_decode($json)));

        echo 'array List', PHP_EOL;
        $value = array();
        $value[] = 'str A';
        $value[] = 'str B';
        $value[] = 'str C';

        $json = json_encode($value);
        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' => 'array',
                    'items' =>
                    array(
                        'type' => 'string',
                        'format' => 'regex',
                        'pattern' => '/^[a-z0-9 ]+$/i',
                        'minLength' => 0,
                        'maxLength' => 2147483647,
                        )), json_decode($json)));

        echo 'array List<Map>', PHP_EOL;
        $value = array();
        $value['users'][] = array('id' => 1, 'account' => 'userA');
        $value['users'][] = array('id' => 3, 'account' => 'userB');
        $value['users'][] = array('id' => 5, 'account' => 'userC');
        $json = json_encode($value);

        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' => 'object',
                    'properties' =>
                    array(
                        'users' =>
                        array(
                            'type' => 'array',
                            'items' =>
                            array(
                                'type' => 'object',
                                'properties' =>
                                array(
                                    'id' =>
                                    array(
                                        'type' => 'integer',
                                        'default' => 0,
                                        'minimum' => 0,
                                        'maximum' => 2147483647,
                                        'exclusiveMinimum' => 0,
                                        'exclusiveMaximum' => 2147483647,
                                    ),
                                    'account' =>
                                    array(
                                        'type' => 'string',
                                        'minLength' => 0,
                                        'maxLength' => 2147483647,
                                    ),
                                ),
                            ),
                        ),
                    ),
                        ), json_decode($json)));
    }

    /**
     */
    public function testAddType() {
        $userType = array(
            'id' => 'user',
            'description' => 'user info',
            'type' => 'object',
            'properties' =>
            array(
                'account' =>
                array(
                    'type' => 'string',
                ),
                'email' =>
                array(
                    'type' => 'string',
                    'required' => true,
                ),
                'noexist' =>
                array(
                    'type' => 'string',
                    'required' => false,
                ),
            ),
        );

        echo '$ref', PHP_EOL;
        $value = array('account' => 'userC', 'email' => 'userC@example.com');
        $json = json_encode($value);
        $schema = new JsonSchema();
        $schema->addType($userType);
        parent::assertTrue($schema->validate(array('$ref' => "user"), json_decode($json)));


        echo 'array List<Map>', PHP_EOL;
        $value = array();
        $value['users'][] = array('account' => 'userA', 'email' => 'userA@example.com');
        $value['users'][] = array('account' => 'userB', 'email' => 'userB@example.com');
        $value['users'][] = array('account' => 'userC', 'email' => 'userC@example.com');
        $json = json_encode($value);
        $schema = new JsonSchema();
        $schema->addType($userType);

        parent::assertTrue($schema->validate(array(
                    'type' => 'object',
                    'properties' =>
                    array(
                        'users' =>
                        array(
                            'type' => 'array',
                            'items' =>
                            array(
                                '$ref' => 'user',
                            ),
                        ),
                    ),
                        ), json_decode($json)));

        $value = array();
        $value['users'][] = array('account' => 'userA', 'email' => 'userA@example.com');
        $value['users'][] = array('account' => 'userB');
        $value['users'][] = array('account' => 'userB', 'noexist' => 'test');
        $json = json_encode($value);
        $schema = new JsonSchema();
        $schema->addType($userType);

        parent::assertFalse($schema->validate(array(
                    'type' => 'object',
                    'properties' =>
                    array(
                        'users' =>
                        array(
                            'type' => 'array',
                            'items' =>
                            array(
                                '$ref' => 'user',
                            ),
                        ),
                    ),
                        ), json_decode($json)));
    }

    /**
     */
    public function testGetErrors() {

        echo 'string', PHP_EOL;
        $json = '"test s p a c e s string"';
        $schema = new JsonSchema();

        parent::assertFalse($schema->validate(array(
                    'type' => 'string',
                    'format' => 'regex',
                    'pattern' => '/^[a-z.]+$/i',
                    'minLength' => 0,
                    'maxLength' => 2147483647,
                        ), json_decode($json)));

        parent::assertEquals(count($schema->getErrors()), 1);

        echo 'date-time', PHP_EOL;
        $json = '"2011-07-27 23:08:09"';
        $schema = new JsonSchema();
        parent::assertFalse($schema->validate(array(
                    'type' => 'string',
                    'format' => 'date-time',
                        ), json_decode($json)));

        parent::assertEquals(count($schema->getErrors()), 1);

        echo 'date', PHP_EOL;
        $json = '"2011-07-27"';
        $schema = new JsonSchema();

        parent::assertTrue($schema->validate(array(
                    'type' => 'string',
                    'format' => 'date',
                        ), json_decode($json)));

        echo 'time', PHP_EOL;
        $json = '"23:08:09"';
        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' => 'string',
                    'format' => 'time',
                        ), json_decode($json)));

        echo 'utc-millisec', PHP_EOL;
        $json = sprintf('"%s"', microtime(true));
        $schema = new JsonSchema();
        parent::assertTrue($schema->validate(array(
                    'type' => 'string',
                    'format' => 'utc-millisec',
                        ), json_decode($json)));

        echo 'color', PHP_EOL;
        $json = '"#f0g"';
        $schema = new JsonSchema();
        parent::assertFalse($schema->validate(array(
                    'type' => 'string',
                    'format' => 'color',
                        ), json_decode($json)));
        parent::assertEquals(count($schema->getErrors()), 1);

        echo 'color', PHP_EOL;
        $json = '"#c3gc3c3"';
        $schema = new JsonSchema();
        parent::assertFalse($schema->validate(array(
                    'type' => 'string',
                    'format' => 'color',
                        ), json_decode($json)));
        parent::assertEquals(count($schema->getErrors()), 1);

        echo 'color', PHP_EOL;
        $json = '"rgb(c3g,c3,c3)"';
        $schema = new JsonSchema();
        parent::assertFalse($schema->validate(array(
                    'type' => 'string',
                    'format' => 'color',
                        ), json_decode($json)));
        parent::assertEquals(count($schema->getErrors()), 1);

        echo 'color', PHP_EOL;
        $json = '"bluer"';
        $schema = new JsonSchema();
        parent::assertFalse($schema->validate(array(
                    'type' => 'string',
                    'format' => 'color',
                        ), json_decode($json)));
        parent::assertEquals(count($schema->getErrors()), 1);

        echo 'host', PHP_EOL;
        $json = '"example.com-"';
        $schema = new JsonSchema();
        parent::assertFalse($schema->validate(array(
                    'type' => 'string',
                    'format' => 'host-name',
                        ), json_decode($json)));

        parent::assertEquals(count($schema->getErrors()), 1);

        echo 'host', PHP_EOL;
        $json = '"exam-ple-.com"';
        $schema = new JsonSchema();
        parent::assertFalse($schema->validate(array(
                    'type' => 'string',
                    'format' => 'host-name',
                        ), json_decode($json)));
        parent::assertEquals(count($schema->getErrors()), 1);

        echo 'host', PHP_EOL;
        $json = '"exam--ple"';
        $schema = new JsonSchema();
        parent::assertFalse($schema->validate(array(
                    'type' => 'string',
                    'format' => 'host-name',
                        ), json_decode($json)));

        parent::assertEquals(count($schema->getErrors()), 1);

        echo 'number', PHP_EOL;
        $json = '123.321';
        $schema = new JsonSchema();

        parent::assertFalse($schema->validate(array(
                    'type' => 'number',
                    'default' => 0,
                    'minimum' => 0,
                    'maximum' => 120,
                    'exclusiveMinimum' => 0,
                    'exclusiveMaximum' => 2147483647,
                        ), json_decode($json)));
        parent::assertEquals(count($schema->getErrors()), 1);


        echo 'integer', PHP_EOL;
        $json = '123';
        $schema = new JsonSchema();

        parent::assertFalse($schema->validate(array(
                    'type' => 'integer',
                    'default' => 0,
                    'minimum' => 321,
                    'maximum' => 2147483647,
                    'exclusiveMinimum' => 0,
                    'exclusiveMaximum' => 2147483647,
                        ), json_decode($json)));
        parent::assertEquals(count($schema->getErrors()), 1);



        echo 'boolean', PHP_EOL;
        $json = '12';
        $schema = new JsonSchema();
        parent::assertFalse($schema->validate(array(
                    'type' => 'boolean',
                    'default' => false,
                        ), json_decode($json)));
        parent::assertEquals(count($schema->getErrors()), 1);


        echo 'integer or boolean', PHP_EOL;
        $json = '"a string"';
        $schema = new JsonSchema();

        parent::assertFalse($schema->validate(array(
                    'type' =>
                    array(
                        'boolean',
                        'integer',
                    ),
                    'default' => false,
                        ), json_decode($json)));

        parent::assertEquals(count($schema->getErrors()), 2);

        $json = '123.321';
        $schema = new JsonSchema();
        parent::assertFalse($schema->validate(array(
                    'type' =>
                    array(
                        0 => 'boolean',
                        1 => 'integer',
                    ),
                    'default' => false,
                        ), json_decode($json)));
        parent::assertEquals(count($schema->getErrors()), 2);


        echo 'object', PHP_EOL;
        $value = new stdClass();
        $value->name = 'a name';
        $value->age = 30;
        $value->height = "183";

        $json = json_encode($value);
        $schema = new JsonSchema();
        parent::assertFalse($schema->validate(array(
                    'type' => 'object',
                    'properties' =>
                    array(
                        'name' =>
                        array(
                            'type' => 'boolean',
                        ),
                        'age' =>
                        array(
                            'type' => 'integer',
                            'default' => 0,
                            'minimum' => 20,
                            'maximum' => 25,
                            'exclusiveMinimum' => 20,
                            'exclusiveMaximum' => 25,
                        ),
                        'height' =>
                        array(
                            'type' => 'number',
                            'default' => 0,
                            'minimum' => 0,
                            'maximum' => 2147483647,
                            'exclusiveMinimum' => 0,
                            'exclusiveMaximum' => 2147483647,
                        ),
                    ),
                        ), json_decode($json)));
        parent::assertEquals(count($schema->getErrors()), 1);



        echo 'array Map', PHP_EOL;
        $value = array();
        $value['name'] = 'a name';
        $value['age'] = 23;
        $value['height'] = 183.5;
        $json = json_encode($value);
        $schema = new JsonSchema();

        parent::assertFalse($schema->validate(array(
                    'type' => 'object',
                    'properties' =>
                    array(
                        'name' =>
                        array(
                            'type' => 'boolean',
                        ),
                        'age' =>
                        array(
                            'type' => 'integer',
                            'default' => 0,
                            'minimum' => 20,
                            'maximum' => 25,
                            'exclusiveMinimum' => 20,
                            'exclusiveMaximum' => 25,
                        ),
                        'height' =>
                        array(
                            'type' => 'number',
                            'default' => 0,
                            'minimum' => 0,
                            'maximum' => 2147483647,
                            'exclusiveMinimum' => 0,
                            'exclusiveMaximum' => 2147483647,
                        ),
                    ),
                        ), json_decode($json)));
        parent::assertEquals(count($schema->getErrors()), 1);


        echo 'array List', PHP_EOL;
        $value = array();
        $value[] = 'str A';
        $value[] = 'str B';
        $value[] = 'str C';
        $schema = new JsonSchema();
        $json = json_encode($value);

        parent::assertFalse($schema->validate(array(
                    'type' => 'array',
                    'items' =>
                    array(
                        'type' => 'string',
                        'format' => 'regex',
                        'pattern' => '/^[a-z0-9]+$/i',
                        'minLength' => 0,
                        'maxLength' => 2147483647,
                    ),
                        ), json_decode($json)));
        parent::assertEquals(count($schema->getErrors()), 1);


        echo 'array List<Map>', PHP_EOL;
        $value = array();
        $value['users'][] = array('id' => 1, 'account' => 'userA');
        $value['users'][] = array('id' => 3, 'account' => 'userB');
        $value['users'][] = array('id' => 5, 'account' => 'userC');
        $json = json_encode($value);
        $schema = new JsonSchema();
        parent::assertFalse($schema->validate(array(
                    'type' => 'object',
                    'properties' =>
                    array(
                        'users' =>
                        array(
                            'type' => 'array',
                            'items' =>
                            array(
                                'type' => 'object',
                                'properties' =>
                                array(
                                    'id' =>
                                    array(
                                        'type' => 'integer',
                                        'default' => 0,
                                        'minimum' => 0,
                                        'maximum' => 2147483647,
                                        'exclusiveMinimum' => 0,
                                        'exclusiveMaximum' => 2147483647,
                                    ),
                                    'account' =>
                                    array(
                                        'type' => 'string',
                                        'minLength' => 0,
                                        'maxLength' => 3,
                                    ),
                                ),
                            ),
                        ),
                    ),
                        ), json_decode($json)));

        parent::assertEquals(count($schema->getErrors()), 1);


        echo 'array List<Map>', PHP_EOL;
        $value = array();
        $value['users'][] = array('id' => 1, 'account' => 'userA');
        $value['users'][] = array('id' => 3, 'account' => 'userB');
        $value['users'][] = array('id' => 5, 'account' => 'userC');
        $schema = new JsonSchema();
        $json = json_encode($value);


        parent::assertFalse($schema->validate(array(
                    'type' => 'object',
                    'properties' =>
                    array(
                        'users' =>
                        array(
                            'type' => 'array',
                            'minItems' => 20,
                            'maxItems' => 50,
                            'items' =>
                            array(
                                'type' => 'object',
                                'properties' =>
                                array(
                                    'id' =>
                                    array(
                                        'type' => 'integer',
                                        'default' => 0,
                                        'minimum' => 0,
                                        'maximum' => 2147483647,
                                        'exclusiveMinimum' => 0,
                                        'exclusiveMaximum' => 2147483647,
                                    ),
                                    'account' =>
                                    array(
                                        'type' => 'string',
                                        'minLength' => 0,
                                        'maxLength' => 3,
                                    ),
                                ),
                            ),
                        ),
                    ),
                        ), json_decode($json)));
        parent::assertEquals(count($schema->getErrors()), 1);

        $userType = array(
            'id' => 'user',
            'description' => 'user info',
            'type' => 'object',
            'required' => true,
            'properties' =>
            array(
                'account' =>
                array(
                    'type' => 'boolean',
                ),
                'email' =>
                array(
                    'type' => 'string',
                    'required' => true,
                ),
            ),
        );
        echo 'array List<Map>', PHP_EOL;
        $value = array();
        $value['users'][] = array('account' => 'userA', 'email' => 'userA@example.com');
        $value['users'][] = array('account' => 'userB', 'email' => 'userB@example.com');
        $value['users'][] = array('account' => 'userC', 'email' => 'userC@example.com');
        $json = json_encode($value);
        $schema = new JsonSchema();
        $schema->addType($userType);

        parent::assertFalse($schema->validate(array(
                    'type' => 'object',
                    'properties' =>
                    array(
                        'users' =>
                        array(
                            'type' => 'array',
                            'items' =>
                            array(
                                '$ref' => 'user',
                            ),
                        ),
                    ),), json_decode($json)));
        parent::assertEquals(count($schema->getErrors()), 1);
    }

}

?>
